{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "customerName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of the VNET"
            }
        },
        "vnetName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Name of the VNET"
            }
        },
        "environment": {
            "type": "string",
            "defaultValue": "prod",
            "allowedValues": [
                "prod",
                "stage",
                "test",
                "dev"
            ],
            "metadata": {
                "description": "description"
            }
        },
        "vnetPrefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/16",
            "metadata": {
                "description": "description"
            }
        },
        "subnet1Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "subnet1Prefix": {
            "type": "string",
            "defaultValue": "10.0.0.0/24",
            "metadata": {
                "description": "description"
            }
        },
        "subnet2Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "subnet2Prefix": {
            "type": "string",
            "defaultValue": "10.0.1.0/24",
            "metadata": {
                "description": "description"
            }
        },
        "subnet3Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "subnet3Prefix": {
            "type": "string",
            "defaultValue": "10.0.2.0/24",
            "metadata": {
                "description": "description"
            }
        },
        "publicIp1Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "publicIp2Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "natGtwy1Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "natGtwy2Name": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "frontEndAppName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "frontEndPeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "frontEndPeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "backEndAppName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "backEndPeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "backEndPeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "searchSvcName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "searchSvcPeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "searchSvcPeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "docServiceName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "docServicePeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "docServicePeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountNamePrefix": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountBlobPeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountBlobPeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountFilePeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountFilePeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountTablePeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountTablePeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountQuePeName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        },
        "storageAccountQuePeNicName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "description"
            }
        }
    },
    "functions": [],
    "variables": {
        "vnetName": "[if(equals(parameters('vnetName'),''), concat('kts-vnet-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('vnetName'))]",
        "subnet1Name": "[if(equals(parameters('subnet1Name'),''), concat('kts-snet-pe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('subnet1Name'))]",
        "subnet2Name": "[if(equals(parameters('subnet2Name'),''), concat('kts-snet-func-fe-int-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('subnet2Name'))]",
        "subnet3Name": "[if(equals(parameters('subnet3Name'),''), concat('kts-snet-func-be-int-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('subnet3Name'))]",
        "publicIp1Name": "[if(equals(parameters('publicIp1Name'),''), concat('kts-pip-nat-fe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('publicIp1Name'))]",
        "publicIp2Name": "[if(equals(parameters('publicIp2Name'),''), concat('kts-pip-nat-be-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('publicIp2Name'))]",
        "natGtwy1Name": "[if(equals(parameters('natGtwy1Name'),''), concat('kts-ng-fe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('natGtwy1Name'))]",
        "natGtwy2Name": "[if(equals(parameters('natGtwy2Name'),''), concat('kts-ng-be-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('natGtwy2Name'))]",
        "frontEndAppName": "[if(equals(parameters('frontEndAppName'),''), concat(parameters('customerName'), 'kts-func-fe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('frontEndAppName'))]",
        "frontEndPeName": "[if(equals(parameters('frontEndPeName'),''), concat('kts-pe-fe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('frontEndPeName'))]",
        "frontEndPeNicName": "[if(equals(parameters('frontEndPeNicName'),''), concat('kts-nic-pe-fe-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('frontEndPeNicName'))]",
        "backEndAppName": "[if(equals(parameters('backEndAppName'),''), concat(parameters('customerName'), 'kts-func-be-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('backEndAppName'))]",
        "backEndPeName": "[if(equals(parameters('backEndPeName'),''), concat('kts-pe-be-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('backEndPeName'))]",
        "backEndPeNicName": "[if(equals(parameters('backEndPeNicName'),''), concat('kts-nic-pe-be-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('backEndPeNicName'))]",
        "searchSvcName": "[if(equals(parameters('searchSvcName'),''), concat(parameters('customerName'), 'kts-srch-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('searchSvcName'))]",
        "searchSvcPeName": "[if(equals(parameters('searchSvcPeName'),''), concat('kts-pe-srch-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('searchSvcPeName'))]",
        "searchSvcPeNicName": "[if(equals(parameters('searchSvcPeNicName'),''), concat('kts-nic-pe-srch-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('searchSvcPeNicName'))]",
        "docServiceName": "[if(equals(parameters('docServiceName'),''), concat(parameters('customerName'), 'kts-cog-doc-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('docServiceName'))]",
        "docServicePeName": "[if(equals(parameters('docServicePeName'),''), concat('kts-pe-cog-doc-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('docServicePeName'))]",
        "docServicePeNicName": "[if(equals(parameters('docServicePeNicName'),''), concat('kts-nic-pe-cog-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('docServicePeNicName'))]",
        "storageAccountName": "[concat(parameters('storageAccountNamePrefix'), uniqueString(subscription().id, resourceGroup().id))]",
        "storageAccountBlobPeName": "[if(equals(parameters('storageAccountBlobPeName'),''), concat('kts-pe-blob-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountBlobPeName'))]",
        "storageAccountBlobPeNicName": "[if(equals(parameters('storageAccountBlobPeNicName'),''), concat('kts-nic-pe-blob-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountBlobPeNicName'))]",
        "storageAccountFilePeName": "[if(equals(parameters('storageAccountFilePeName'),''), concat('kts-pe-file-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountFilePeName'))]",
        "storageAccountFilePeNicName": "[if(equals(parameters('storageAccountFilePeNicName'),''), concat('kts-nic-pe-file-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountFilePeNicName'))]",
        "storageAccountTablePeName": "[if(equals(parameters('storageAccountTablePeName'),''), concat('kts-pe-table-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountTablePeName'))]",
        "storageAccountTablePeNicName": "[if(equals(parameters('storageAccountTablePeNicName'),''), concat('kts-nic-pe-table-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountTablePeNicName'))]",
        "storageAccountQuePeName": "[if(equals(parameters('storageAccountQuePeName'),''), concat('kts-pe-que-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountQuePeName'))]",
        "storageAccountQuePeNicName": "[if(equals(parameters('storageAccountQuePeNicName'),''), concat('kts-nic-pe-que-c2nai-', parameters('environment'),'-',resourceGroup().location,'-000'), parameters('storageAccountQuePeNicName'))]",
        "dnsZoneSites": "privatelink.azurewebsites.net",
        "dnsZoneSearch": "privatelink.search.windows.net",
        "dnsZoneCognitive": "privatelink.cognitiveservices.azure.com",
        "dnsZoneBlob": "privatelink.blob.core.windows.net",
        "dnsZoneFile": "privatelink.file.core.windows.net",
        "dnsZoneQueue": "privatelink.queue.core.windows.net",
        "dnsZoneTable": "privatelink.table.core.windows.net"
    },
    "resources": [
    {
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2023-04-01",
        "name": "[variables('vnetName')]",
        "location": "[resourceGroup().location]",
        "properties": {
            "addressSpace": {
                "addressPrefixes": [
                    "[parameters('vnetPrefix')]"
                ]
            },
            "subnets": []
        }
    },
    {
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "apiVersion": "2023-05-01",
        "name": "[format('{0}/{1}', variables('vnetName'), variables('subnet1Name'))]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "addressPrefixes": [
                "[parameters('subnet1Prefix')]"
            ],
            "delegations": [],
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
        }
    },
    {
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "apiVersion": "2023-05-01",
        "name": "[format('{0}/{1}', variables('vnetName'), variables('subnet2Name'))]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]",
            "[resourceId('Microsoft.Network/natGateways', variables('natGtwy1Name'))]"
        ],
        "properties": {
            "addressPrefixes": [
                "[parameters('subnet2Prefix')]"
            ],
            "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natGtwy1Name'))]"
            },
            "delegations": [
                {
                    "name": "Microsoft.Web.serverFarms",
                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet2Name')), '/delegations/Microsoft.Web.serverFarms')]",
                    "properties": {
                        "serviceName": "Microsoft.Web/serverFarms"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                }
            ],
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
        }
    },
    {
        "type": "Microsoft.Network/virtualNetworks/subnets",
        "apiVersion": "2023-05-01",
        "name": "[format('{0}/{1}', variables('vnetName'), variables('subnet3Name'))]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet2Name'))]",
            "[resourceId('Microsoft.Network/natGateways', variables('natGtwy2Name'))]"
        ],
        "properties": {
            "addressPrefixes": [
                "[parameters('subnet3Prefix')]"
            ],
            "natGateway": {
                "id": "[resourceId('Microsoft.Network/natGateways', variables('natGtwy2Name'))]"
            },
            "delegations": [
                {
                    "name": "Microsoft.Web.serverFarms",
                    "id": "[concat(resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet3Name')), '/delegations/Microsoft.Web.serverFarms')]",
                    "properties": {
                        "serviceName": "Microsoft.Web/serverFarms"
                    },
                    "type": "Microsoft.Network/virtualNetworks/subnets/delegations"
                }
            ],
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
        }
    },
    {
        "name": "[variables('publicIp1Name')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2023-04-01",
        "location": "[resourceGroup().location]",
        "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                    "protectionMode": "VirtualNetworkInherited"
            }
        }
    },
    {
        "name": "[variables('publicIp2Name')]",
        "type": "Microsoft.Network/publicIPAddresses",
        "apiVersion": "2023-04-01",
        "location": "[resourceGroup().location]",
        "sku": {
                "name": "Standard",
                "tier": "Regional"
            },
        "properties": {
            "publicIPAddressVersion": "IPv4",
            "publicIPAllocationMethod": "Static",
            "idleTimeoutInMinutes": 4,
            "ipTags": [],
            "ddosSettings": {
                    "protectionMode": "VirtualNetworkInherited"
            }
        }
    },
    {
        "type": "Microsoft.Network/natGateways",
        "apiVersion": "2023-05-01",
        "name": "[variables('natGtwy1Name')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIp1Name'))]"
        ],
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "idleTimeoutInMinutes": 4,
            "publicIpAddresses": [
                {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIp1Name'))]"
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/natGateways",
        "apiVersion": "2023-05-01",
        "name": "[variables('natGtwy2Name')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIp2Name'))]"
        ],
        "sku": {
            "name": "Standard",
            "tier": "Regional"
        },
        "properties": {
            "idleTimeoutInMinutes": 4,
            "publicIpAddresses": [
                {
                    "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIp2Name'))]"
                }
            ]
        }
    },
    {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2022-09-01",
        "name": "[variables('frontEndAppName')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "S1",
            "tier": "Standard",
            "size": "S1",
            "family": "S",
            "capacity": 1
        },
        "kind": "app",
        "properties": {
            "perSiteScaling": false,
            "elasticScaleEnabled": false,
            "maximumElasticWorkerCount": 1,
            "isSpot": false,
            "reserved": false,
            "isXenon": false,
            "hyperV": false,
            "targetWorkerCount": 0,
            "targetWorkerSizeId": 0,
            "zoneRedundant": false
        }
    },
    {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-09-01",
        "name": "[variables('frontEndAppName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('frontEndAppName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet2Name'))]"
        ],
        "kind": "app",
        "properties": {
            "enabled": true,
            "hostNameSslStates": [
                {
                    "name": "[concat(variables('frontEndAppName'), '.azurewebsites.net')]",
                    "sslState": "Disabled",
                    "hostType": "Standard"
                },
                {
                    "name": "[concat(variables('frontEndAppName'), '.scm.azurewebsites.net')]",
                    "sslState": "Disabled",
                    "hostType": "Repository"
                }
            ],
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('frontEndAppName'))]",
            "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet2Name'))]",
            "reserved": false,
            "isXenon": false,
            "hyperV": false,
            "vnetRouteAllEnabled": false,
            "vnetImagePullEnabled": false,
            "vnetContentShareEnabled": false,
            "siteConfig": {
                "numberOfWorkers": 1,
                "acrUseManagedIdentityCreds": false,
                "alwaysOn": true,
                "http20Enabled": false,
                "functionAppScaleLimit": 0,
                "minimumElasticInstanceCount": 0
            },
            "scmSiteAlsoStopped": false,
            "clientAffinityEnabled": true,
            "clientCertEnabled": false,
            "clientCertMode": "Required",
            "hostNamesDisabled": false,
            "containerSize": 0,
            "dailyMemoryTimeQuota": 0,
            "httpsOnly": true,
            "redundancyMode": "None",
            "storageAccountRequired": false,
            "keyVaultReferenceIdentity": "SystemAssigned"
        }
    },
    {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('frontEndAppName'), '/web')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]"
        ],
        "properties": {
            "numberOfWorkers": 1,
            "defaultDocuments": [
                "Default.htm",
                "Default.html",
                "Default.asp",
                "index.htm",
                "index.html",
                "iisstart.htm",
                "default.aspx",
                "index.php",
                "hostingstart.html"
            ],
            "netFrameworkVersion": "v4.0",
            "nodeVersion": "~18",
            "requestTracingEnabled": false,
            "remoteDebuggingEnabled": false,
            "remoteDebuggingVersion": "VS2019",
            "httpLoggingEnabled": false,
            "acrUseManagedIdentityCreds": false,
            "logsDirectorySizeLimit": 35,
            "detailedErrorLoggingEnabled": false,
            "publishingUsername": "$app-frontend-c2nai-prod",
            "scmType": "VSTSRM",
            "use32BitWorkerProcess": true,
            "webSocketsEnabled": false,
            "alwaysOn": true,
            "managedPipelineMode": "Integrated",
            "virtualApplications": [
                {
                    "virtualPath": "/",
                    "physicalPath": "site\\wwwroot",
                    "preloadEnabled": true
                }
            ],
            "loadBalancing": "LeastRequests",
            "experiments": {
                "rampUpRules": []
            },
            "autoHealEnabled": false,
            "vnetRouteAllEnabled": false,
            "vnetPrivatePortsCount": 0,
            "publicNetworkAccess": "Disabled",
            "localMySqlEnabled": false,
            "ipSecurityRestrictions": [
                {
                    "ipAddress": "Any",
                    "action": "Allow",
                    "priority": 2147483647,
                    "name": "Allow all",
                    "description": "Allow all access"
                }
            ],
            "scmIpSecurityRestrictions": [
                {
                    "ipAddress": "Any",
                    "action": "Allow",
                    "priority": 2147483647,
                    "name": "Allow all",
                    "description": "Allow all access"
                }
            ],
            "scmIpSecurityRestrictionsUseMain": false,
            "http20Enabled": false,
            "minTlsVersion": "1.2",
            "scmMinTlsVersion": "1.2",
            "ftpsState": "FtpsOnly",
            "preWarmedInstanceCount": 0,
            "elasticWebAppScaleLimit": 0,
            "functionsRuntimeScaleMonitoringEnabled": false,
            "minimumElasticInstanceCount": 0,
            "azureStorageAccounts": {}
        }
    },
    {
        "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('frontEndAppName'), '/ftp')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]"
        ],
        "properties": {
            "allow": true
        }
    },
    {
        "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('frontEndAppName'), '/scm')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]"
        ],
        "properties": {
            "allow": true
        }
    },
    {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('frontEndAppName'), '/', variables('frontEndAppName'), '.azurewebsites.net')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]"
        ],
        "properties": {
            "siteName": "[variables('frontEndAppName')]",
            "hostNameType": "Verified"
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('frontEndPeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('frontEndPeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('frontEndPeName')), concat('/privateLinkServiceConnections/', variables('frontEndPeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]",
                        "groupIds": [
                            "sites"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('frontEndPeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneSites')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('frontEndPeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('frontEndPeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSites'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSites'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneSites'), format('{0}-link', variables('dnsZoneSites')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('frontEndAppName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSites'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.Web/serverfarms",
        "apiVersion": "2022-09-01",
        "name": "[variables('backEndAppName')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "S1",
            "tier": "Standard",
            "size": "S1",
            "family": "S",
            "capacity": 1
        },
        "kind": "app",
        "properties": {
            "perSiteScaling": false,
            "elasticScaleEnabled": false,
            "maximumElasticWorkerCount": 1,
            "isSpot": false,
            "reserved": false,
            "isXenon": false,
            "hyperV": false,
            "targetWorkerCount": 0,
            "targetWorkerSizeId": 0,
            "zoneRedundant": false
        }
    },
    {
        "type": "Microsoft.Web/sites",
        "apiVersion": "2022-09-01",
        "name": "[variables('backEndAppName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/serverfarms', variables('backEndAppName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet3Name'))]"
        ],
        "kind": "app",
        "properties": {
            "enabled": true,
            "hostNameSslStates": [
                {
                    "name": "[concat(variables('backEndAppName'), '.azurewebsites.net')]",
                    "sslState": "Disabled",
                    "hostType": "Standard"
                },
                {
                    "name": "[concat(variables('backEndAppName'), '.scm.azurewebsites.net')]",
                    "sslState": "Disabled",
                    "hostType": "Repository"
                }
            ],
            "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('backEndAppName'))]",
            "virtualNetworkSubnetId": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet3Name'))]",
            "reserved": false,
            "isXenon": false,
            "hyperV": false,
            "vnetRouteAllEnabled": false,
            "vnetImagePullEnabled": false,
            "vnetContentShareEnabled": false,
            "siteConfig": {
                "numberOfWorkers": 1,
                "acrUseManagedIdentityCreds": false,
                "alwaysOn": true,
                "http20Enabled": false,
                "functionAppScaleLimit": 0,
                "minimumElasticInstanceCount": 0
            },
            "scmSiteAlsoStopped": false,
            "clientAffinityEnabled": true,
            "clientCertEnabled": false,
            "clientCertMode": "Required",
            "hostNamesDisabled": false,
            "containerSize": 0,
            "dailyMemoryTimeQuota": 0,
            "httpsOnly": true,
            "redundancyMode": "None",
            "storageAccountRequired": false,
            "keyVaultReferenceIdentity": "SystemAssigned"
        }
    },
    {
        "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('backEndAppName'), '/ftp')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]"
        ],
        "properties": {
            "allow": true
        }
    },
    {
        "type": "Microsoft.Web/sites/basicPublishingCredentialsPolicies",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('backEndAppName'), '/scm')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]"
        ],
        "properties": {
            "allow": true
        }
    },
    {
        "type": "Microsoft.Web/sites/config",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('backEndAppName'), '/web')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]"
        ],
        "properties": {
            "numberOfWorkers": 1,
            "defaultDocuments": [
                "Default.htm",
                "Default.html",
                "Default.asp",
                "index.htm",
                "index.html",
                "iisstart.htm",
                "default.aspx",
                "index.php",
                "hostingstart.html"
            ],
            "netFrameworkVersion": "v7.0",
            "requestTracingEnabled": false,
            "remoteDebuggingEnabled": false,
            "httpLoggingEnabled": false,
            "acrUseManagedIdentityCreds": false,
            "logsDirectorySizeLimit": 35,
            "detailedErrorLoggingEnabled": false,
            "publishingUsername": "$app-backend-c2nai-prod",
            "scmType": "None",
            "use32BitWorkerProcess": true,
            "webSocketsEnabled": false,
            "alwaysOn": true,
            "managedPipelineMode": "Integrated",
            "virtualApplications": [
                {
                    "virtualPath": "/",
                    "physicalPath": "site\\wwwroot",
                    "preloadEnabled": true
                }
            ],
            "loadBalancing": "LeastRequests",
            "experiments": {
                "rampUpRules": []
            },
            "autoHealEnabled": false,
            "vnetRouteAllEnabled": false,
            "vnetPrivatePortsCount": 0,
            "publicNetworkAccess": "Disabled",
            "localMySqlEnabled": false,
            "ipSecurityRestrictions": [
                {
                    "ipAddress": "Any",
                    "action": "Allow",
                    "priority": 2147483647,
                    "name": "Allow all",
                    "description": "Allow all access"
                }
            ],
            "scmIpSecurityRestrictions": [
                {
                    "ipAddress": "Any",
                    "action": "Allow",
                    "priority": 2147483647,
                    "name": "Allow all",
                    "description": "Allow all access"
                }
            ],
            "scmIpSecurityRestrictionsUseMain": false,
            "http20Enabled": false,
            "minTlsVersion": "1.2",
            "scmMinTlsVersion": "1.2",
            "ftpsState": "FtpsOnly",
            "preWarmedInstanceCount": 0,
            "elasticWebAppScaleLimit": 0,
            "functionsRuntimeScaleMonitoringEnabled": false,
            "minimumElasticInstanceCount": 0,
            "azureStorageAccounts": {}
        }
    },
    {
        "type": "Microsoft.Web/sites/hostNameBindings",
        "apiVersion": "2022-09-01",
        "name": "[concat(variables('backEndAppName'), '/', variables('backEndAppName'), '.azurewebsites.net')]",
        "location": "East US",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]"
        ],
        "properties": {
            "siteName": "[variables('backEndAppName')]",
            "hostNameType": "Verified"
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('backEndPeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('backEndPeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('backEndPeName')), concat('/privateLinkServiceConnections/', variables('backEndPeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Web/sites', variables('backEndAppName'))]",
                        "groupIds": [
                            "sites"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('backEndPeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('backEndPeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('backEndPeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSites'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-azurewebsites-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSites'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Search/searchServices",
        "apiVersion": "2022-09-01",
        "name": "[variables('searchSvcName')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "standard"
        },
        "identity": {
            "type": "SystemAssigned"
        },
        "properties": {
            "replicaCount": 1,
            "partitionCount": 1,
            "hostingMode": "Default",
            "publicNetworkAccess": "Disabled",
            "networkRuleSet": {
                "ipRules": []
            },
            "encryptionWithCmk": {
                "enforcement": "Unspecified"
            },
            "disableLocalAuth": false,
            "authOptions": {
                "apiKeyOnly": {}
            }
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('searchSvcPeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Search/searchServices', variables('searchSvcName'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[concat(variables('searchSvcPeName'))]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('searchSvcPeName')), concat('/privateLinkServiceConnections/', variables('searchSvcPeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Search/searchServices', variables('searchSvcName'))]",
                        "groupIds": [
                            "searchService"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('searchSvcPeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneSearch')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Search/searchServices', variables('searchSvcName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('searchSvcPeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('searchSvcPeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSearch'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-search-windows-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSearch'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneSearch'), format('{0}-link', variables('dnsZoneSearch')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Search/searchServices', variables('searchSvcName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneSearch'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.CognitiveServices/accounts",
        "apiVersion": "2023-05-01",
        "name": "[variables('docServiceName')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "S0"
        },
        "kind": "FormRecognizer",
        "identity": {
            "type": "None"
        },
        "properties": {
            "customSubDomainName": "[variables('docServiceName')]",
            "networkAcls": {
                "defaultAction": "Allow",
                "virtualNetworkRules": [],
                "ipRules": []
            },
            "publicNetworkAccess": "Disabled"
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('docServicePeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.CognitiveServices/accounts', variables('docServiceName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('docServicePeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('docServicePeName')), concat('/privateLinkServiceConnections/', variables('docServicePeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', variables('docServiceName'))]",
                        "groupIds": [
                            "account"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('docServicePeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneCognitive')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.CognitiveServices/accounts', variables('docServiceName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('docServicePeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('docServicePeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneCognitive'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-cognitiveservices-azure-com",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneCognitive'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneCognitive'), format('{0}-link', variables('dnsZoneCognitive')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.CognitiveServices/accounts', variables('docServiceName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneCognitive'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2023-01-01",
        "name": "[variables('storageAccountName')]",
        "location": "[resourceGroup().location]",
        "sku": {
            "name": "Standard_RAGRS",
            "tier": "Standard"
        },
        "kind": "StorageV2",
        "properties": {
            "dnsEndpointType": "Standard",
            "defaultToOAuthAuthentication": true,
            "publicNetworkAccess": "Disabled",
            "allowCrossTenantReplication": false,
            "minimumTlsVersion": "TLS1_2",
            "allowBlobPublicAccess": true,
            "allowSharedKeyAccess": true,
            "networkAcls": {
                "resourceAccessRules": [],
                "bypass": "AzureServices",
                "virtualNetworkRules": [],
                "ipRules": [
                    {
                        "value": "73.237.114.23",
                        "action": "Allow"
                    },
                    {
                        "value": "136.55.178.225",
                        "action": "Allow"
                    },
                    {
                        "value": "75.60.207.95",
                        "action": "Allow"
                    },
                    {
                        "value": "73.35.40.188",
                        "action": "Allow"
                    }
                ],
                "defaultAction": "Deny"
            },
            "supportsHttpsTrafficOnly": true,
            "encryption": {
                "requireInfrastructureEncryption": false,
                "services": {
                    "file": {
                        "keyType": "Account",
                        "enabled": true
                    },
                    "blob": {
                        "keyType": "Account",
                        "enabled": true
                    }
                },
                "keySource": "Microsoft.Storage"
            },
            "accessTier": "Hot"
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "sku": {
            "name": "Standard_RAGRS",
            "tier": "Standard"
        },
        "properties": {
            "cors": {
                "corsRules": []
            },
            "deleteRetentionPolicy": {
                "allowPermanentDelete": false,
                "enabled": true,
                "days": 7
            },
            "isVersioningEnabled": true,
            "changeFeed": {
                "enabled": false
            },
            "restorePolicy": {
                "enabled": false
            },
            "containerDeleteRetentionPolicy": {
                "enabled": true,
                "days": 7
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/fileServices",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "sku": {
            "name": "Standard_RAGRS",
            "tier": "Standard"
        },
        "properties": {
            "shareDeleteRetentionPolicy": {
                "enabled": true,
                "days": 7
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/queueServices",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
            "cors": {
                "corsRules": []
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/tableServices",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
            "cors": {
                "corsRules": []
            }
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default/attdocscontainer')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
            "immutableStorageWithVersioning": {
                "enabled": false
            },
            "defaultEncryptionScope": "$account-encryption-key",
            "denyEncryptionScopeOverride": false,
            "publicAccess": "Container"
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default/hrdocscontainer')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
            "immutableStorageWithVersioning": {
                "enabled": false
            },
            "defaultEncryptionScope": "$account-encryption-key",
            "denyEncryptionScopeOverride": false,
            "publicAccess": "Container"
        }
    },
    {
        "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
        "apiVersion": "2023-01-01",
        "name": "[concat(variables('storageAccountName'), '/default/ocgdocscontainer')]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageAccountName'), 'default')]",
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
        ],
        "properties": {
            "immutableStorageWithVersioning": {
                "enabled": false
            },
            "defaultEncryptionScope": "$account-encryption-key",
            "denyEncryptionScopeOverride": false,
            "publicAccess": "Container"
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('storageAccountBlobPeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('storageAccountBlobPeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountBlobPeName')), concat('/privateLinkServiceConnections/', variables('storageAccountBlobPeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "groupIds": [
                            "blob"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('storageAccountBlobPeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneBlob')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('storageAccountBlobPeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountBlobPeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneBlob'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-blob-core-windows-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneBlob'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneBlob'), format('{0}-link', variables('dnsZoneBlob')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneBlob'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('storageAccountFilePeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('storageAccountFilePeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountFilePeName')), concat('/privateLinkServiceConnections/', variables('storageAccountFilePeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "groupIds": [
                            "file"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('storageAccountFilePeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneFile')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('storageAccountFilePeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountFilePeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneFile'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-file-core-windows-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneFile'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneFile'), format('{0}-link', variables('dnsZoneFile')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneFile'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('storageAccountTablePeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('storageAccountFilePeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountFilePeName')), concat('/privateLinkServiceConnections/', variables('storageAccountFilePeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "groupIds": [
                            "table"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('storageAccountTablePeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneTable')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('storageAccountTablePeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountTablePeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneTable'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-table-core-windows-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneTable'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneTable'), format('{0}-link', variables('dnsZoneTable')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneTable'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateEndpoints",
        "apiVersion": "2023-05-01",
        "name": "[variables('storageAccountQuePeName')]",
        "location": "[resourceGroup().location]",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
        ],
        "properties": {
            "privateLinkServiceConnections": [
                {
                    "name": "[variables('storageAccountQuePeName')]",
                    "id": "[concat(resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountQuePeName')), concat('/privateLinkServiceConnections/', variables('storageAccountQuePeName')))]",
                    "properties": {
                        "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                        "groupIds": [
                            "queue"
                        ]
                    }
                }
            ],
            "customNetworkInterfaceName": "[variables('storageAccountQuePeNicName')]",
            "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('vnetName'), variables('subnet1Name'))]"
            }
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones",
        "apiVersion": "2018-09-01",
        "name": "[variables('dnsZoneQueue')]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {}
    },
    {
        "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
        "apiVersion": "2023-05-01",
        "name": "[concat(variables('storageAccountQuePeName'), '/default')]",
        "dependsOn": [
            "[resourceId('Microsoft.Network/privateEndpoints', variables('storageAccountQuePeName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneQueue'))]"
        ],
        "properties": {
            "privateDnsZoneConfigs": [
                {
                    "name": "privatelink-queue-core-windows-net",
                    "properties": {
                        "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneQueue'))]"
                    }
                }
            ]
        }
    },
    {
        "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
        "apiVersion": "2018-09-01",
        "name": "[format('{0}/{1}', variables('dnsZoneQueue'), format('{0}-link', variables('dnsZoneQueue')))]",
        "location": "global",
        "dependsOn": [
            "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
            "[resourceId('Microsoft.Network/privateDnsZones', variables('dnsZoneQueue'))]",
            "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
        ],
        "properties": {
            "registrationEnabled": false,
            "virtualNetwork": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]"
            }
        }
    }
    ],
    "outputs": {}
}